# Do not edit this file. These are helper functions for github action
import tomllib, json, os, re, boto3, os, subprocess

def create_payload_json() -> None:
    with open("build/manifest.toml", "rb") as f:
        manifest = tomllib.load(f)

    print("Manifest file found")

    org_name = os.getenv('ORG_NAME')
    repo_name = os.getenv('REPO_NAME')

    if 'lambda_name' not in manifest:
        manifest['lambda_name'] = org_name.lower() + '/' + sanitize(repo_name.lower())

    if 'repository_arn' not in manifest:
        sts_client = boto3.client('sts')
        account_id = sts_client.get_caller_identity()['Account']
        region_name = sts_client.meta.region_name
        manifest['repository_arn'] = f"arn:aws:ecr:{region_name}:{account_id}:repository/lambda/{manifest['lambda_name'].lower()}"

    print("Saving payload.json")
    with open("payload.json", "w") as f:
        json.dump({
            "body":manifest,
            "caller": {
                "organization": org_name,
                "repository": repo_name,
            }
        }, f)
    print("payload.json saved")

def sanitize(lambda_name: str) -> str:
    """
    Converts a string into an ARN-safe Lambda function name.
    - Keeps only letters, numbers, hyphens, and underscores.
    - Truncates to 64 characters.
    - Replaces sequences of invalid characters with a single underscore.
    - Strips leading/trailing underscores or hyphens.
    """
    # Replace invalid characters with underscore
    sanitized = re.sub(r'[^A-Za-z0-9_-]+', '_', lambda_name)
    # Remove leading/trailing underscores/hyphens
    sanitized = sanitized.strip('_-')
    # Truncate to 57 chars (ARN limit after suffixes)
    return sanitized[:57]

def setup_ecr_and_push_image() -> None:
    # 1. Parse payload.json
    with open("payload.json") as f:
        payload = json.load(f)
    repository_arn = payload["body"]["repository_arn"]
    repo_name = repository_arn.split("repository/", 1)[1]
    region = os.environ.get("AWS_REGION", "us-east-1")

    # 2. Get AWS account ID
    sts = boto3.client('sts', region_name=region)
    account_id = sts.get_caller_identity()["Account"]

    # 3. Compose ECR registry URI and repo name
    ecr_registry = f"{account_id}.dkr.ecr.{region}.amazonaws.com"
    ecr_repo = repo_name
    print(f"ECR registry: {ecr_registry}")
    print(f"ECR repo: {ecr_repo}")

    # 4. Ensure ECR repository exists
    ecr = boto3.client('ecr', region_name=region)
    try:
        ecr.describe_repositories(repositoryNames=[ecr_repo])
        print("ECR repository exists.")
    except ecr.exceptions.RepositoryNotFoundException:
        print("ECR repository not found. Creating...")
        ecr.create_repository(repositoryName=ecr_repo)
        print("ECR repository created.")

    # 5. Login to ECR
    print("Logging in to ECR...")
    login_pwd = subprocess.check_output([
        "aws", "ecr", "get-login-password", "--region", region
    ]).decode().strip()
    subprocess.run(
        ["docker", "login", "--username", "AWS", "--password-stdin", ecr_registry], 
        input=login_pwd.encode(), 
        check=True,
        stdout=subprocess.DEVNULL,
    )

    # 6. Build Docker image
    image_tag = os.environ.get("GITHUB_SHA")
    image_uri = f"{ecr_registry}/{ecr_repo}:{image_tag}"
    print(f"Building Docker image {image_uri} ...")
    subprocess.run(
        ["docker", "build", "-f", "build/Dockerfile", "-t", image_uri, "."],
        check=True,
        stdout=subprocess.DEVNULL,
    )

    # 7. Push Docker image
    print(f"Pushing Docker image {image_uri} ...")
    subprocess.run(
        ["docker", "push", image_uri], 
        check=True,
        stdout=subprocess.DEVNULL,
    )

    print(f"Image pushed: {image_uri}")

def invoke_lambda() -> None:
    with open("payload.json", "rb") as f:
        filebytes = f.read()

    print("Invoking lambda")
    lambda_client = boto3.client('lambda')
    resp = lambda_client.invoke(
        FunctionName="arn:aws:lambda:us-east-1:473958445471:function:christian_test",
        InvocationType="RequestResponse",
        Payload=filebytes
    )

    respbytes = resp['Payload'].read()

    print("Lambda Says:")
    print(respbytes.decode())

if __name__ == '__main__':
    if os.getenv("GITHUB_ACTIONS") != "true":
        print("This is a helper script for CICD and is called by github actions!")
        exit(1)

    create_payload_json()
    setup_ecr_and_push_image()
    invoke_lambda()